# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rck5Gi8_BOo6edT3URMMmp4Dnf89VYp7
"""

import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from pathlib import PurePath
from torchvision import transforms, datasets
import pathlib
from PIL import Image
import torch.nn.functional as F
from torchvision.transforms import Resize
import matplotlib.pyplot as plt
import torch.cuda
import torchvision.transforms as transforms
import torchvision
import streamlit as st 
import tempfile





# set title of app
st.title("Malware classification")
st.write("")

# enable users to upload images for the model to make predictions
file_up = st.file_uploader("Upload an image", type = ['png', 'jpg'] )

normalize = transforms.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225))


t = transforms.ToTensor()

# Combine the transforms
transforms = transforms.Compose([t, normalize])

# Define the CNN model
class MalwareCNN(nn.Module):
    def __init__(self):
        super(MalwareCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1)
        self.relu1 = F.relu
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, stride=1, padding=1)
        self.relu2 = F.relu
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv3 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.relu3 = F.relu
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.fc1 = nn.Linear(64 * 32 * 32, 256)
        self.relu3 = F.relu
        self.fc2 = nn.Linear(256, 25)

    def forward(self, x):
        x = torch.tensor(x)
        x = x.unsqueeze(0)# batch size of 1
        x = x.resize(3,256,256)
        x = self.conv1(x)
        x = self.relu1(x)
        x = self.pool1(x)
        x = self.conv2(x)
        x = self.relu2(x)
        x = self.pool2(x)
        x = self.conv3(x)
        x = self.relu3(x)
        x = self.pool3(x)
        x = x.view(-1, 64 * 32 * 32)
        #x = x.view(-1, 128 * 128)
        x = self.fc1(x)
        x = self.relu3(x)
        x = self.fc2(x)
        #x = F.log_softmax(self.fc2(x), dim=1)
        return x

learning_rate = 0.001

model = MalwareCNN()

model.load_state_dict(torch.load('model_3_layer_3.pth',map_location=torch.device('cpu')))


if file_up is not None:
    # image = Image.open(file_up)
    # img= load_image(file_up)
    st.image(file_up, caption = 'Uploaded Image.', use_column_width = True)
    st.write("")
    st.write("Just a second ...")
    with open(file_up.name ,"wb") as f:
        f.write(file_up.getbuffer())

    image = Image.open(file_up.name)
# ==========
    transformed_image = transforms(image)

    outputs = model(transformed_image)
    _, predicted = torch.max(outputs.data, 1)

    with open('label.txt') as f:
        classes = [line.strip() for line in f.readlines()]

    
    st.write(classes[int(predicted)])
    os.remove(file_up.name)


